pifon.txt - installation guide for your pifon setup

1. Hardware

   - UVC compatible USB WebCam with Audio
     or
   - cheap USB sound card with analog input and analog microphone


2. Video (via WebCam, experimental)

  * Packages

    # apt-get install uvccapture uvcdynctrl guvcview motion

  * Test Camera Video

  - Make sure Webcam is found:

    # dmesg

  ...
  [   15.193914] uvcvideo: Found UVC 1.00 device <unnamed> (046d:0819)
  [   15.566165] input: UVC Camera (046d:0819) as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3.2/1-1.3.2:1.0/input/input0
  [   15.756263] usbcore: registered new interface driver uvcvideo
  [   15.850629] USB Video Class driver (1.1.1)
  [   16.629132] uvcvideo: Failed to query (GET_DEF) UVC control 2 on unit 2: -110 (exp. 2).
  [   16.674854] usbcore: registered new interface driver snd-usb-audio

  - ssh with X11 support on target

  host> ssh -Y chris@pifon

  - run "guvcview" to find valid camera parameters
    my Logitech cam uses:
    - brightness: 128
    - contrast:   32
    - saturation: 32
    - AWB:        on
    - Gain:       0
    - Sharpness:  53
    - Exposure:   Aperture Priority Mode

  - take a snapshot image (download snap.jpg and see)

    $ uvccapture


3. Audio (via WebCam or USB sound card)

3.1. Hardware Setup

  * Test

  - Check if ALSA has recognized USB WebCam audio/USB sound card

    $ arecord -l

    Karte 1: U0x46d0x819 [USB Device 0x46d:0x819], Gerät 0: USB Audio [USB Audio]
      Sub-Geräte: 1/1
      Sub-Gerät #0: subdevice #0

  - Adjust the recording level (I use 100)

    - interactive

    $ alsamixer -c 1

      - press F4 to select record section
      - alter value with cursor up/down
      - save with ESCAPE

    - manual

     $ amixer -c 1 sset 'Mic' <value>

   * Setup ALSA config

     # vi /etc/asound.conf

     ----- schnipp -----
     pcm.mixin {
             type dsnoop
             ipc_key 12345
             ipc_key_add_uid yes
             slave {
                     pcm "hw:1,0"
                     channels 1
                     rate 16000
             }
     }
     ----- schnipp -----

     this create a new device "mixin" that allows to share the
     microphone input on "hw:1,0" in different apps

   - Note: select a sample rate that is suitable for your device

     You can check your device with:

     # cat /proc/asound/card1/stream0

      Capture:
        Status: Stop
        Interface 2
          Altset 1
          Format: S16_LE
          Channels: 1
          Endpoint: 2 IN (ADAPTIVE)
          Rates: 48000, 44100

     This device support 44100 or 48000.

    - You can use a lower sample rate in mixin. This will enable soft
      resampling in ALSA. Choose the value so that the audio signal is
      still of good quality but does not consume too much CPU power.

  * create $HOME/.sample_rate file and write down the sample rate

3.3. The VU Meter (for pifon server part only)

  - in pifon/fon/tools compile the 'rms' utility

    > cd pifon/fon/tools
    > make

  - test run the ./vumeter script. it will record audio and emit the peak values

    > ./vumeter 16000

    use the sample rate determined in the last section

3.4. Install Audio Streaming Server (for pifon part only)

   [Source: http://www.t3node.com/blog/live-streaming-mp3-audio-with-darkice-and-icecast2-on-raspberry-pi/]

   * Use the following programs
     - Icecast2: streaming server
     - DarkIce: capture audio from WebCam and stream to Icecast2

3.4.1. Darkice Setup

   * Use OGG as audio stream format:

     # apt-get install darkice

   * Use MP3: Compile own DarkIce package as Debian package lacks mp3 support

     # sh -c "echo 'deb-src http://mirrordirector.raspbian.org/raspbian/ wheezy main contrib non-free rpi' >> /etc/apt/sources.list"
     # apt-get update
     # apt-get --no-install-recommends install build-essential devscripts autotools-dev fakeroot dpkg-dev debhelper autotools-dev dh-make quilt ccache libsamplerate0-dev libpulse-dev libaudio-dev lame libjack-jackd2-dev libasound2-dev libtwolame-dev libfaad-dev libflac-dev libmp4v2-dev libshout3-dev libmp3lame-dev
     $ mkdir src && cd src
     $ apt-get source darkice
     $ cd darkice-1.0/
     $ vi debian/rules

     ---- schnipp ----
     #!/usr/bin/make -f

     %:
         dh $@

     .PHONY: override_dh_auto_configure
     override_dh_auto_configure:
         ln -s /usr/share/misc/config.guess .
         ln -s /usr/share/misc/config.sub .
         dh_auto_configure -- --prefix=/usr --sysconfdir=/usr/share/doc/darkice/examples --with-vorbis-prefix=/usr/lib/arm-linux-gnueabihf/ --with-jack-prefix=/usr/lib/arm-linux-gnueabihf/ --with-alsa-prefix=/usr/lib/arm-linux-gnueabihf/ --with-faac-prefix=/usr/lib/arm-linux-gnueabihf/ --with-aacplus-prefix=/usr/lib/arm-linux-gnueabihf/ --with-samplerate-prefix=/usr/lib/arm-linux-gnueabihf/ --with-lame-prefix=/usr/lib/arm-linux-gnueabihf/ CFLAGS='-march=armv6 -mfpu=vfp -mfloat-abi=hard'
     ---- schnipp ----

     $ debchange -v 1.0-999~mp3+1

     ---- schnipp ----
     darkice (1.0-999~mp3+1) UNRELEASED; urgency=low

       * New build with mp3 support

       --  <pi@raspberrypi>  Sat, 11 Aug 2012 13:35:06 +0000
     ---- schnipp ----

     $ dpkg-buildpackage -rfakeroot -uc -b
     $ cd ..
     # dpkg -i ../darkice_1.0-999~mp3+1_armhf.deb

   * Configure DarkIce

     # vi /etc/darkice.cfg

     ----- schnipp -----
     [general]
     duration        = 0        # duration of encoding, in seconds. 0 means forever
     bufferSecs      = 1        # size of internal slip buffer, in seconds
     reconnect       = yes      # reconnect to the server(s) if disconnected

     # this section describes the audio input that will be streamed
     [input]
     device          = mixin     # use my ALSA device
     sampleRate      = 16000     # sample rate in Hz. try 11025, 22050 or 44100
     bitsPerSample   = 16        # bits per sample. try 16
     channel         = 1         # channels. 1 = mono, 2 = stereo

     # this section describes a streaming connection to an IceCast2 server
     # there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]
     # these can be mixed with [icecast-x] and [shoutcast-x] sections
     [icecast2-0]
     bitrateMode     = vbr
     format          = mp3
     quality         = 0.6
     server          = localhost
     port            = 8000
     password        = hackme
     mountPoint      = pifon
     name            = baby@pifon
     description     = The live stream from baby's room
     url             = http://pifon.local:80/
     genre           = baby
     public          = no
     highpass        = 500
     ----- schnipp -----

     - adjust "format = vorbis" if using the OGG darkice
     - adjust "url" to match your pi's host name

3.4.2 Icecast2 Setup

   * Install Icecast2

      # apt-get install icecast2

      Config? -> No

   * Configure Icecast2

      # vi /etc/default/icecast2
      ENABLE=true

      # vi /etc/icecast2/icecast.xml

      ----- schnipp -----
      <burst-on-connect>0</burst-on-connect>
      <!-- <burst-size>65535</burst-size> -->
      ----- schnipp -----

3.4.3 Test

   * Run Icecast2

      # /etc/init.d/icecast2 start

   * Run DarkIce

      $ sudo darkice

   * Listen on your Mac with VLC (http://www.videolan.org/vlc/)
     - open web browser on: http://pifon.local:8000
     - in VLC open: http://pifon.local:8000/pifon.m3u

   * Autorun DarkIce in system
     -> see pifon/rc.pifon

3.5 Audio Receiver (for monitor part only)

   * If you use the analog output on your Raspi then make sure to enable it:

      $ amixer cset numid=3 1

   * Make sure your audio device is set up correctly
     - check levels (I use 85)

        $ alsamixer

     - play some sounds:

        $ aplay /usr/share/sounds/alsa/*

   * Install MPD music player daemon

      # apt-get install mpd mpc (ncmpcpp = curses player)

   * Install nice sounds for events

      # apt-get install sound-icons

4. Instant Messaging via XMPP

4.1 Server

  * Install prosody
    # apt-get install prosody

  * Config prosody
    # vi /etc/prosody/conf.d/pifon.cfg.lua

    ----- schnipp -----
    VirtualHost "pifon.local"

    	enabled = true
    	allow_registration = true
    	disallow_s2s = true

    Component "muc.pifon.local" "muc"
    ----- schnipp -----

  * Restart prosody
    # /etc/init.d/prosody restart

  * Watch the server log
    # tail -f /var/log/prosody/prosody.log

  * Add users
    # prosodyctl adduser audio@pifon.local
    ; use "audio" as a password

4.2 Host Client (for Debugging and Command Line Access)

  * Setup your host Mac client to join the new server
    -> I use Adium http://adium.im
    - add a new XMPP user account <user>@pifon.local with own <pass>
      and register at server pifon.local
    - In the new account tab select "Show Services..."
      -> double click on the "muc" service
       -> select room "pifon"
        -> a new chat called 'pifon@muc.pifon.local' is opened
        -> keep chat open to watch pifon traffic

4.3 Raspi Client

  * [OBSOLETE] Download sleekxmpp 1.0 library (NOT 1.1.x) and install in Python3
    -> http://sleekxmpp.com/index.html
    > cd src
    > sudo -s
    # wget http://github.com/fritzy/SleekXMPP/zipball/1.0
    # mv 1.0 install.zip
    # unzip install.zip
    # cd fritzy-SleekXMPP-79f1aa0
    # python3 setup.py install

  * Install new SleekXMPP lib 1.3.x
    # pip3 install sleekxmpp

  * Test with example "muc.py"
    > cd examples
    > python3 muc.py -j audio@pifon.local -p audio -r pifon@muc.pifon.local -n audio
    --> a new user "audio" should appear in your Adium
    --> talk to audio by mentioning "audio" ;)


5. I2C Setup for LCD Plate on mon

  * install i2c tools
    # apt-get install i2c-tools

  * [OBSOLETE] in /etc/modprobe.d/raspi-blacklist.conf remove the i2c entry by commenting it out
    #blacklist i2c-bcm2708

  * [NEW] add in /boot/config.txt:
        dtparam=i2c0=on
    (i2c1 for newer models)

  * create the file '/etc/udev/rules.d/10-local_i2c_group.rules':
    ----- schnipp -----
    KERNEL=="i2c-[0-9]*", GROUP="i2c"
    ----- schnipp -----
    that assigns the i2c devices to group 'i2c'

  * add 'i2c-dev' to /etc/modules:
    ----- schnipp -----
    i2c-dev
    ----- schnipp -----

  * make sure your user is in group 'i2c':

    # usermod -a -G i2c chris

  * test bus

    > i2cdetect 0
    (or 1 if bus 1)


6. Install pifon

6.1 Install pifon server

  * Hardware:
    * Raspberry Pi
    * USB Web cam or USB sound card with audio

  * Installed software:
    * tmux, git, sox
      # apt-get install tmux sox
    * python3.x with sleekxmpp (see section 4.3)

  * Prerequisites:
    * Rasbpian installation with network access
    * Working ALSA audio source via WebCAM (see section 3)
    * Streaming server with Icecast and darkice
    * Prosody XMPP Server (see section 4)

  * Installation:
    * Clone github repository in your home
      > cd ~
      > git clone git://github.com/cnvogelg/raspi.git

    * as root edit /etc/rc.local and add before "exit 0":

      ----- schnipp -----
      su -l chris -c '/home/chris/raspi/pifon/fon/rc.pifon_fon start'
      ----- schnipp -----

      where 'chris' is my user/home

    * create file $HOME/.sample_rate that contains the sample rate of
      your device

  * Test:
    * reboot and test
    * you can always attach to your running processes with:
      > tmux list-sessions
      > tmux attach -t audio
      leave the tmux session with Ctrl+B and d
    * you can exit the audio server by pressing Ctrl+C while being attached
    * in your shell you can start it again with:
      > $HOME/raspi/pifon/fon/rc.pifon_fon start

6.2 Install pifon mon

   * Hardware:
     * Raspberry Pi
     * Adafruit RGB LCD Plate for Raspi [1]

   * Installed software:
     * tmux, python-smbus
          # apt-get install tmux python-smbus
    * python3.2 with sleekxmpp 1.0 (see section 4.3)
    * python2.7 with sleekxmpp 1.0 (see section 4.3)

  * Installation:
    * Clone github repository in your home
      > cd ~
      > git clone git://github.com/cnvogelg/raspi.git

    * as root edit /etc/rc.local and add

      ----- schnipp -----
      su -l chris -c '/home/chris/raspi/pifon/mon/rc.pifon_mon start'
      ----- schnipp -----

      where 'chris' is my user/home

    * on pifon SERVER add prosody user 'client' with password 'client'

      pifon_srv# prosodyctl adduser client@pifon.local
      password: client

  * Test:
    * reboot and test
    * you can always attach to your running processes with:
      > tmux list-sessions
      > tmux attach -t mon
      leave the tmux session with Ctrl+B and d

  [1] http://www.adafruit.com/products/1110

