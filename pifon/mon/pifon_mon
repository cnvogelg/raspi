#!/usr/bin/env python
#
# pifon_mon
#
# monitor tool to listen for pifon events and performs actions like
#

from __future__ import print_function
import os
import sys
import ConfigParser
import inspect
import traceback

# add ../../tools and ../common to python path
my_dir = os.path.split(inspect.getfile( inspect.currentframe() ))[0]
tools_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","..","tools")))
if tools_dir not in sys.path:
  sys.path.insert(0, tools_dir)
commons_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","common")))
if commons_dir not in sys.path:
  sys.path.insert(0, commons_dir)

import botio
import botopts
import pifon_opts

import lcdui
import control
import audioplay
import parser
import writer
import state

def read_config(audio_play):
  """read configuration file"""
  cfg_file = os.path.join(os.path.dirname(sys.argv[0]),'pifon_mon.cfg')
  parser = ConfigParser.SafeConfigParser()
  parser.read([cfg_file])
  # submit audio options
  if parser.has_section('audio'):
    for i in parser.items('audio'):
      audio_play.set_option(i[0],i[1])

# ---------- main ----------

def main():
  # setup bot
  opts = pifon_opts.audio_opts
  desc = pifon_opts.audio_desc
  bio = botio.BotIO()
  bopts = botopts.BotOpts(bio,'audio',opts,False)

  ap = audioplay.AudioPlay()
  w = writer.Writer(bio)
  s = state.State(w)
  p = parser.Parser(s)
  ui = lcdui.LCDUI()
  ctrl = control.Control(ui,s,opts,desc)
  s.set_control(ctrl)
  s.set_player(ap)

  # update state with incoming options
  def update_state(key, value):
    s.set_audio_option(key, value, True)
  bopts.set_notifier(update_state)

  # read configs and setup audio
  read_config(ap)
  ap.setup()

  # setup state
  s.setup()

  print("pifon_mon: started",file=sys.stderr)
  # main loop
  timeout = 0.1
  exit_flag = None
  try:
    while True:
      # read args from stdin with timeout
      msg = bio.read_args(timeout)
      if msg:
        args = msg.args
        if not bopts.parse_command(args):
          p.dispatch(args)
      # handle control events
      exit_flag = ctrl.handle_events()
      if exit_flag != None:
        break
      s.handle()
  except KeyboardInterrupt:
    print("\npifon_mon: break -> shutting down",file=sys.stderr)
  except Exception as e:
    ui.show_message("FATAL CRASH!")
    ui.update_background(ui.BACK_RED)
    print("\nFATAL CRASH!", file=sys.stderr)
    traceback.print_exc(file=sys.stderr)
    exit_flag = True

  if exit_flag == None:
    ctrl.shutdown()
  print("--- pifon_mon done ---",file=sys.stderr)
  sys.exit(0)

if __name__ == '__main__':
  main()
