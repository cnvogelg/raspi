#!/usr/bin/env python3
#
# pifon_audio
#
# detect intervals ouf loudness and generate events
# uses SoX' rec tool with ALSA driver for USB WebCam audio
#

import os
import time
import sys
import select
import inspect

# add ../../tools and ../common to python path
my_dir = os.path.split(inspect.getfile( inspect.currentframe() ))[0]
tools_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","..","tools")))
if tools_dir not in sys.path:
  sys.path.insert(0, tools_dir)
commons_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","common")))
if commons_dir not in sys.path:
  sys.path.insert(0, commons_dir)

import botio
import botopts
import pifon_opts
import detector
import recorder

# ----- Event Handler -----

class DetectorEventHandler:
  def __init__(self, botio):
    self.botio = botio
  def state(self, state):
    self.botio.write_line("audio_state %s" % state)
  def level(self, max_level, cur_level):
    self.botio.write_line("audio_level %d %d" % (max_level, cur_level))

# ---------- main ----------

def main():

  opts = pifon_opts.audio_opts

  # setup bot
  bio = botio.BotIO()
  bopts = botopts.BotOpts(bio,'audio',opts,True)
  bopts.send_all()

  # setup audio
  ev = DetectorEventHandler(bio)
  d = detector.Detector(ev, opts)
  rec = recorder.Recorder()

  # start recorder
  rec.start()

  print("start audio",file=sys.stderr);

  # ----- main loop -----
  try:
    while True:
      # check audio data
      buf = rec.read_buf()
      if buf == False:
        break
      elif buf != None:
        d.handle_buffer(buf)
      # check for bot command
      msg = bio.read_args(timeout=0.0)
      if msg:
        args = msg.args
        if not bopts.parse_command(args):
          # answer pings
          if args[0] == 'audio_ping':
            bio.write_line('audio_pong', receivers=[msg.sender])
          elif args[0] == 'audio_state':
            bio.write_line('audio_state '+ d.get_state_name())
  except KeyboardInterrupt:
    print("\nbreak -> stopping audio",file=sys.stderr);

if __name__ == '__main__':
  main()
